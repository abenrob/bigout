{
  "name": "pdfkit",
  "description": "A PDF generation library for Node.js",
  "keywords": [
    "pdf",
    "pdf writer",
    "pdf generator",
    "graphics",
    "document",
    "vector"
  ],
  "version": "0.7.0",
  "homepage": "http://pdfkit.org/",
  "author": {
    "name": "Devon Govett",
    "email": "devongovett@gmail.com",
    "url": "http://badassjs.com/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/devongovett/pdfkit.git"
  },
  "bugs": {
    "url": "http://github.com/devongovett/pdfkit/issues"
  },
  "devDependencies": {
    "coffee-script": ">=1.0.1",
    "codemirror": "~3.20.0",
    "markdown": "~0.5.0",
    "jade": "~1.1.5",
    "coffeeify": "^0.6.0",
    "browserify": "^3.39.0",
    "brfs": "~1.0.1",
    "exorcist": "^0.1.5",
    "brace": "^0.2.1",
    "blob-stream": "^0.1.2"
  },
  "dependencies": {
    "png-js": ">=0.1.0",
    "linebreak": "~0.1.0"
  },
  "scripts": {
    "prepublish": "make js",
    "postpublish": "make clean"
  },
  "main": "js/document",
  "browserify": {
    "transform": [
      "brfs"
    ]
  },
  "engine": [
    "node >= v0.10.0"
  ],
  "readme": "# PDFKit\n\nA JavaScript PDF generation library for Node and the browser.\n\n## Description\n\nPDFKit is a PDF document generation library for Node and the browser that makes creating complex, multi-page, printable documents easy. \nIt's written in CoffeeScript, but you can choose to use the API in plain 'ol JavaScript if you like. The API embraces \nchainability, and includes both low level functions as well as abstractions for higher level functionality. The PDFKit API \nis designed to be simple, so generating complex documents is often as simple as a few function calls.\n\nCheck out some of the [documentation and examples](http://pdfkit.org/docs/getting_started.html) to see for yourself!\nYou can also read the guide as a [self-generated PDF](http://pdfkit.org/docs/guide.pdf) with example output displayed inline.\nIf you'd like to see how it was generated, check out the README in the [docs](https://github.com/devongovett/pdfkit/tree/master/docs)\nfolder.\n\nYou can also try out an interactive in-browser demo of PDFKit [here](http://pdfkit.org/demo/browser.html).\n\n## Installation\n\nInstallation uses the [npm](http://npmjs.org/) package manager.  Just type the following command after installing npm.\n\n    npm install pdfkit\n\n## Features\n\n* Vector graphics\n  * HTML5 canvas-like API\n  * Path operations\n  * SVG path parser for easy path creation\n  * Transformations\n  * Linear and radial gradients\n* Text\n  * Line wrapping\n  * Text alignments\n  * Bulleted lists\n* Font embedding\n  * Supports TrueType (.ttf), TrueType Collections (.ttc), and Datafork TrueType (.dfont) fonts\n  * Font subsetting\n* Image embedding\n  * Supports JPEG and PNG files (including indexed PNGs, and PNGs with transparency)\n* Annotations\n  * Links\n  * Notes\n  * Highlights\n  * Underlines\n  * etc.\n  \n## Coming soon!\n\n* Patterns fills\n* Outlines\n* PDF Security\n* Higher level APIs for creating tables and laying out content\n* More performance optimizations\n* Even more awesomeness, perhaps written by you! Please fork this repository and send me pull requests.\n    \n## Example\n\n```coffeescript\nPDFDocument = require 'pdfkit'\n\n# Create a document\ndoc = new PDFDocument\n\n# Pipe it's output somewhere, like to a file or HTTP response\n# See below for browser usage\ndoc.pipe fs.createWriteStream('output.pdf')\n\n# Embed a font, set the font size, and render some text\ndoc.font('fonts/PalatinoBold.ttf')\n   .fontSize(25)\n   .text('Some text with an embedded font!', 100, 100)\n\n# Add another page\ndoc.addPage()\n   .fontSize(25)\n   .text('Here is some vector graphics...', 100, 100)\n\n# Draw a triangle\ndoc.save()\n   .moveTo(100, 150)\n   .lineTo(100, 250)\n   .lineTo(200, 250)\n   .fill(\"#FF3300\")\n\n# Apply some transforms and render an SVG path with the 'even-odd' fill rule\ndoc.scale(0.6)\n   .translate(470, -380)\n   .path('M 250,75 L 323,301 131,161 369,161 177,301 z')\n   .fill('red', 'even-odd')\n   .restore()\n\n# Add some text with annotations\ndoc.addPage()\n   .fillColor(\"blue\")\n   .text('Here is a link!', 100, 100)\n   .underline(100, 100, 160, 27, color: \"#0000FF\")\n   .link(100, 100, 160, 27, 'http://google.com/')\n\n# Finalize PDF file\ndoc.end()\n```\n \n[The PDF output from this example](http://pdfkit.org/demo/out.pdf) (with a few additions) shows the power of PDFKit â€” producing \ncomplex documents with a very small amount of code.  For more, see the `demo` folder and the \n[PDFKit programming guide](http://pdfkit.org/docs/getting_started.html).\n\n## Browser Usage\n\nThere are two ways to use PDFKit in the browser.  The first is to use [Browserify](http://browserify.org/),\nwhich is a Node module packager for the browser with the familiar `require` syntax.  The second is to use\na prebuilt version of PDFKit, which you can [download from Github](https://github.com/devongovett/pdfkit/releases).\n\nIn addition to PDFKit, you'll need somewhere to stream the output to.  HTML5 has a \n[Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) object which can be used to store binary data, and\nget URLs to this data in order to display PDF output inside an iframe, or upload to a server, etc.  In order to \nget a Blob from the output of PDFKit, you can use the [blob-stream](https://github.com/devongovett/blob-stream)\nmodule.\n\nThe following example uses Browserify to load `PDFKit` and `blob-stream`, but if you're not using Browserify, \nyou can load them in whatever way you'd like (e.g. script tags).\n\n```coffeescript\n# require dependencies\nPDFDocument = require 'pdfkit'\nblobStream  = require 'blob-stream'\n\n# create a document the same way as above\ndoc = new PDFDocument\n\n# pipe the document to a blob\nstream = doc.pipe(blobStream())\n\n# add your content to the document here, as usual\n\n# get a blob when you're done\ndoc.end()\nstream.on 'finish', ->\n  # get a blob you can do whatever you like with\n  blob = stream.toBlob('application/pdf')\n\n  # or get a blob URL for display in the browser\n  url = stream.toBlobURL('application/pdf')\n  iframe.src = url\n```\n\nYou can see an interactive in-browser demo of PDFKit [here](http://pdfkit.org/demo/browser.html).\n\nNote that in order to Browserify a project using PDFKit, you need to install the `brfs` module with npm, \nwhich is used to load built-in font data into the package. It is listed as a `devDependency` in \nPDFKit's `package.json`, so it isn't installed by default for Node users. \nIf you forget to install it, Browserify will print an error message.\n\n## Documentation\n\nFor complete API documentation and more examples, see the [PDFKit website](http://pdfkit.org/).\n\n## License\n\nPDFKit is available under the MIT license.",
  "readmeFilename": "README.md",
  "_id": "pdfkit@0.7.0",
  "dist": {
    "shasum": "1d5020b9ca6fa083318d29e89d8fb29ce4a7f487"
  },
  "_from": "pdfkit@",
  "_resolved": "https://registry.npmjs.org/pdfkit/-/pdfkit-0.7.0.tgz"
}
